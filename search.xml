<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>scanf()和printf()函数详解</title>
      <link href="/2019/09/20/scanf-he-printf-han-shu-xiang-jie/"/>
      <url>/2019/09/20/scanf-he-printf-han-shu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="scanf与printf用法详解"><a href="#scanf与printf用法详解" class="headerlink" title="scanf与printf用法详解"></a>scanf与printf用法详解</h2><h3 id="一、scanf家族"><a href="#一、scanf家族" class="headerlink" title="一、scanf家族"></a>一、scanf家族</h3><p>1、scanf家族的原型</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sscanf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>每个原型中的省略号表示一个可变长度的指针列表。从输入转换而来的值逐个存储到这些指针指向的内存位置。由于C的参数传递都是传值调用决定了可变参数都是指针列表。注意：若给的不是指针，而是变量值。scanf将把变量值当做指针，在进行解引用时或者导致程序终止，或者导致不可预料的内存位置的数据被改写。</p><p>2、返回值</p><pre><code> 当格式化字符串format到达末尾或者读取的输入不再匹配格式字符串所指定的类型时，输入就停止，并返回被转换的输入值的数目,若在任何输入都没被转换之前文件就到达尾部则返回EOF。</code></pre><p>3、类型的匹配</p><pre><code> 由于scanf是采用可变参数的机制，所以函数无法验证它们的指针参数是否为正确的类型，所以函数假定它们是正确的，（因此格式字符必须和后面的指针指向的类型保持一致）如果指针参数的类型和输入数据的类型不匹配则结果值就是垃圾。而且邻近的变量也有可能被改写。例如：</code></pre><p>float a;</p><p>scanf(“%d”,&amp;a);     //本来a是一个float数据，却用一个整形指针指向变量a。</p><p>4、scanf格式代码</p><p>format字符串中包括以下内容。</p><p>空白字符：他们与输入中的零个或多个空白字符匹配，在处理过程中将被忽略。(常用于%c中)</p><p>格式代码：他们指定函数如何解释接下来的输入字符。</p><p>其他字符：若出现其他字符时，下一个输入字符必须与之匹配。若匹配则该输入字符丢弃，若不匹配，函数不再读取，直接返回。</p><p>格式代码：以%开头，后面接：一个可选的星号；一个可选的宽度；一个可选的限定符；格式代码</p><pre><code> (1)星号：转换后的值被丢弃而不进行存储，跳过不需要的输入字符。 (2)宽度：限制被读取用于转换的输入字符的个数。若未给出宽度，函数读入字符直到遇到空白字符。 (3)限定符：修改有些格式代码的含义。注意转换所有的short、long、double、long double时都要加上限定符。若未加上将导致一个较长的变量只有一部分被初始化，一个较短的变量的邻近变量也被修改。这些取决于机器中类型的长度。</code></pre><p>格式码\限定符hlLd,i,nshortlong o,u,xunsigned shortunsigned long e,f,g doublelong double<br>例如：short var_a;</p><p>scanf(“%hd”,&amp;var_a);</p><pre><code> (4)格式码:单个字符，表示输入字符如何被解释，以及指针列表指针的指向类型。</code></pre><p>代码对应的指针参数类型含义cchar *读取和存储单个字符，前导的空白字符不跳过(可以在格式字符串中加入空格来跳过)。若给出宽度，就读取和存储这个数目的字符，后面不会添加NUL，必须保证足够大的数组空间i<br> dint *有符号整数被转换。%d解释为十进制。%i根据第一个字符决定值的基数，和整型字符值常量的表示形式相同。10,034,0xa2u<br> o<br> xunsigned *无符号整数被转换。u:十进制；o:八进制；x:十六进制e<br> f<br> gfloat *期待一个浮点值。他的形式必须像一个浮点型字面值常量，但小数点并不必须schar *读取一串非空白字符，当发现空白时则输入停止。后面自动加上NUL。必须保证足够大的数组空间nint *处理字符的个数</p><pre><code>5、用scanf实现行定向的输入。</code></pre><p>   由于scanf把回车也当做空白字符处理所以使用scanf保持行边界的同步时很困难的。为了实现行定向。可以搭配fgets。先用fgets读取一行，然后用sscanf对读取的行处理。</p><p>   6、使用sscanf处理可变格式的输入。</p><pre><code>    int a,b,c; fgets(buf,20,stdin); char *p = strrchr(buf,'\n'); *p = '\0';               //去除回车符 if(sscanf(buf,"%d%d%d",&amp;a,&amp;b,&amp;c) != 3) {      a = 1;     //defalut value of a      if(sscanf(buf,"%d%d",&amp;b,&amp;c) != 2)      {           b = 1;     //default value of b           if(sscanf(buf,"%d",&amp;c)!=1)           {                printf("input error\n ");                exit(1);           }      } } printf("a = %d\nb=%d\nc=%d\n",a,b,c);</code></pre><h3 id="二、printf家族"><a href="#二、printf家族" class="headerlink" title="二、printf家族"></a>二、printf家族</h3><p>   1、原型</p><pre class=" language-c"><code class="language-c">   <span class="token keyword">int</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token function">fprintf</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buffer<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>format<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>；</code></pre><p>   2、类型匹配</p><p>   printf函数和scanf一样，无法验证一个值是否具有格式码所表示的正确类型。所以保证他们相互匹配是程序员的责任。</p><p>   3、printf格式码</p><p>   format字符串包含格式码，它使参数列表的下一个值根据指定的方式进行格式化，对于其他的字符则原样输出。</p><p>   格式码由一个%开头，后边可以跟：</p><p>   标志字符、字段宽度、精度、修改符、#标志、格式码</p><p>   (1)标志字符：</p><p>标志含义-左对齐；默认右对齐0右对齐时，用0填充左边未使用的列；默认用空格填充+当一个数为正数时，前面加上一个+号，默认不显示空格当一个数为正数时，前面加上一个空格，默认不显示</p><p>(2)字段宽度：指定输出的最小字符数，若输出的小于字段宽度。则根据标志字符进行相应的修改输出</p><p>   (3)精度：</p><p>   作用于%s:指定要被转换的最多字符数</p><p>   作用于%f:指定出现在小数点后的数字位数</p><p>   (4)修改符:</p><p>修改符作用对象表示类型hd,i,o,u,xshort型整数ld,i,o,u,xlong型整数le,f,glong double型数据</p><pre><code>(5)格式代码</code></pre><p>代码参数含义cint参数被裁剪为unsigned char类型并作为字符打印d<br> iint作为一个十进制整数打印o<br> u<br> xunsigned int参数作为一个无符号值打印，u使用十进制，o使用八进制，x使用十六进制e、f、gdouble参数按照浮点数打印，精度缺少为6位schar *打印一个字符串nint *打印字符的个数</p><pre><code> (6)#标志#标志可以作用于格式代码：o,x,e,f,g     也就是无符号数和浮点数o：产生的值以0开头；x：以0x开头；(这两个很实用。)e,f,g：确保结果始终包含一个小数点即使后面没有数字。long double a = 3.14;printf("a = %08.3lf",a);     //右对齐，开头补零，字符宽度8位，精度3位，以long double型输出。</code></pre><p>   三、利用sprintf和scanf实现字符串和数值的相互转换</p><p>   利用sscanf可以实现字符串向数值的转换，而利用sprintf实现数值向字符串的转换</p><p>   #include&lt;stdio.h&gt;</p><p> int main()</p><p> {</p><pre><code>  float a = 3.14;  double b;     char buf[20];  sscanf("3.42","%lf",&amp;b);          //将字符串转换为数值double  sprintf(buf,"%.2f",a);               //将double型数值转换为字符串  printf("b = %.2f\n",b);  printf("buf is:%s\n",buf);</code></pre><p> }</p><p>   另外标准库提供的用于字符串转换为整型/浮点型的函数有：</p><pre class=" language-c"><code class="language-c">   <span class="token keyword">int</span> <span class="token function">atoi</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">atol</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">strtol</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>string<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>unused<span class="token punctuation">,</span><span class="token keyword">int</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">long</span> <span class="token keyword">int</span> <span class="token function">strtoul</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>string<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>unused<span class="token punctuation">,</span><span class="token keyword">int</span> base<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> <span class="token function">atof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">double</span> <span class="token function">strtod</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>string<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>unused<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>   使用注意事项：</p><p>   1、跳过前导空白字符，忽略非法缀尾字符</p><p>   2、对于整型，当base=0时，根据string的字面确定string的进制。(八进制(以0开头)、十进制(默认)、十六进制(以0x开头))；</p><p>   3、若不能转换为相应类型则返回0</p><p>   4、unused指向无法转换的字符的指针的指针。</p><p>   四、通过sprintf获取一个整数的位数</p><p>   通常对于一个整数data，我们需要获得其位数的方法为：对其与10、100、1000、等相除来确定共有多少位。</p><p>   下面程序提供了一个获取data位数的一个好方法：</p><pre><code>    int number,data;  data = 12345;  char buf[20];  sprintf(buf,"%d%n",data,&amp;number);          //利用snprintf防止访问内存越界：snprintf(buf,20,"%d%n",data,&amp;number);  printf("data is %d,has %d characters\n",data,number);</code></pre><p>   利用printf的%n格式符记录打印字符的个数来统计data的位数。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/17/hello-world/"/>
      <url>/2019/09/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
